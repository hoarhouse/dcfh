#!/usr/bin/env python3
import os
from supabase import create_client, Client
from pathlib import Path

# Supabase configuration
SUPABASE_URL = "https://atzommnkkwzgbktuzjti.supabase.co"
SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImF0em9tbW5ra3d6Z2JrdHV6anRpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTMzNzAyMzIsImV4cCI6MjA2ODk0NjIzMn0.9mh2A5A5mLbo408S9g7k76VRzSJE0QWdiYTTOPLEiks"

# Initialize Supabase client
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

def post_has_static_file(blog_slug, post_slug):
    """Check if static HTML file exists for this post"""
    file_path = Path(f"blog/{blog_slug}/{post_slug}.html")
    return file_path.exists()

def generate_static_html(post, blog):
    """Generate static HTML file for a post"""
    blog_slug = blog['slug']
    post_slug = post['slug']
    post_id = post['id']
    
    # Create directory if it doesn't exist
    blog_dir = Path(f"blog/{blog_slug}")
    blog_dir.mkdir(parents=True, exist_ok=True)
    
    # Escape content for HTML
    title = post['title'].replace('"', '&quot;')
    excerpt = (post.get('excerpt') or '').replace('"', '&quot;')
    
    # Generate HTML content
    html_content = f'''<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{title} - {blog['name']} - DCF Hungary</title>
    <meta name="description" content="{excerpt}">
    <meta property="og:title" content="{title}">
    <meta property="og:description" content="{excerpt}">
    <meta property="og:image" content="{post.get('featured_image_url', '')}">
    <meta property="og:type" content="article">
    <link rel="stylesheet" href="../../css/blog-post.css">
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
    <script src="../../js/dcf-core.js"></script>
    <script src="../../js/dcf-ui.js"></script>
</head>
<body>
    <header class="header">
        <nav class="nav-container">
            <a href="../../index.html" class="logo"><!-- Logo dynamically generated by dcf-ui.js --></a>
            <ul class="nav-menu" id="navMenu">
                <!-- Populated by dcf-ui.js -->
            </ul>
            <div class="user-menu">
                <!-- Simple 4-button language switcher -->
                <div class="language-buttons">
                    <button onclick="changeLanguage('en')" class="lang-btn">EN</button>
                    <button onclick="changeLanguage('it')" class="lang-btn">IT</button>
                    <button onclick="changeLanguage('es')" class="lang-btn">ES</button>
                    <button onclick="changeLanguage('hu')" class="lang-btn">HU</button>
                </div>
            </div>
        </nav>
    </header>

    <nav class="breadcrumb">
        <div class="breadcrumb-container">
            <a href="../../index.html">Home</a>
            <span>‚Ä∫</span>
            <a href="../index.html">Blog</a>
            <span>‚Ä∫</span>
            <a href="../category.html?blog={blog_slug}">{blog['name']}</a>
            <span>‚Ä∫</span>
            <span>{title}</span>
        </div>
    </nav>

    <main class="main-container">
        <article>
            <div class="post-header">
                {f'<div class="post-featured-media"><img src="{post.get("featured_image_url", "")}" alt="{title}"></div>' if post.get('featured_image_url') else ''}
                <div class="post-header-content">
                    <div class="post-meta">
                        <span>{post.get('published_at', post['created_at'])[:10]}</span>
                        <span>{blog['name']}</span>
                        <span id="viewCount">{post.get('view_count', 0)} views</span>
                    </div>
                    <h1 class="post-title">{title}</h1>
                    {f'<div class="post-excerpt">{excerpt}</div>' if post.get('excerpt') else ''}
                </div>
            </div>

            <div class="post-content">
                <div class="post-body">
                    {post['content']}
                </div>
            </div>

            <div class="post-footer">
                <div class="post-stats">
                    <span>Views: <strong id="footerViewCount">{post.get('view_count', 0)}</strong></span>
                    <span>Published: <strong>{post.get('published_at', post['created_at'])[:10]}</strong></span>
                </div>
                <a href="../category.html?blog={blog_slug}" class="back-to-blog">‚Üê Back to Blog</a>
            </div>
        </article>
    </main>

    <script>
        const postId = '{post_id}';
        
        // Initialize DCF UI - wait for it to be available
        function initDCFUI() {{
            if (window.dcfUI && typeof window.dcfUI.initialize === 'function') {{
                console.log('üöÄ Calling dcfUI.initialize()');
                window.dcfUI.initialize();
            }} else {{
                console.log('‚è≥ Waiting for dcfUI...');
                setTimeout(initDCFUI, 100);
            }}
        }}
        
        window.addEventListener('load', function() {{
            setTimeout(initDCFUI, 100);
        }});
        
        async function trackView() {{
            if (!window.dcfSupabase) return;
            try {{
                const {{ data: currentPost }} = await window.dcfSupabase
                    .from('blog_posts')
                    .select('view_count')
                    .eq('id', postId)
                    .single();
                
                const newViewCount = (currentPost?.view_count || 0) + 1;
                
                await window.dcfSupabase
                    .from('blog_posts')
                    .update({{ view_count: newViewCount }})
                    .eq('id', postId);
                
                console.log('‚úÖ View tracked');
            }} catch (err) {{
                console.warn('View tracking error:', err);
            }}
        }}

        async function loadStats() {{
            let attempts = 0;
            while (!window.dcfSupabase && attempts < 50) {{
                await new Promise(r => setTimeout(r, 100));
                attempts++;
            }}
            
            if (!window.dcfSupabase) return;
            
            try {{
                const {{ data }} = await window.dcfSupabase
                    .from('blog_posts')
                    .select('view_count')
                    .eq('id', postId)
                    .single();
                
                if (data) {{
                    document.getElementById('viewCount').textContent = `${{data.view_count || 0}} views`;
                    document.getElementById('footerViewCount').textContent = data.view_count || 0;
                }}
            }} catch (err) {{
                console.warn('Stats error:', err);
            }}
        }}

        document.addEventListener('DOMContentLoaded', () => {{
            trackView();
            setTimeout(loadStats, 1000);
        }});
    </script>

    <!-- Social Share Sidebar -->
    <div class="share-sidebar" id="shareSidebar">
        <a href="#" class="share-btn share-twitter" title="Share on Twitter">
            <svg viewBox="0 0 24 24">
                <path d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"/>
            </svg>
        </a>
        
        <a href="#" class="share-btn share-facebook" title="Share on Facebook">
            <svg viewBox="0 0 24 24">
                <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"/>
            </svg>
        </a>
        
        <a href="#" class="share-btn share-linkedin" title="Share on LinkedIn">
            <svg viewBox="0 0 24 24">
                <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
            </svg>
        </a>
        
        <a href="#" class="share-btn share-email" title="Share via Email">
            <svg viewBox="0 0 24 24">
                <path d="M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z"/>
            </svg>
        </a>
        
        <a href="#" class="share-btn share-copy" title="Copy Link">
            <svg viewBox="0 0 24 24">
                <path d="M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z"/>
            </svg>
        </a>
    </div>

    <script>
        // Social share functionality
        document.querySelectorAll('.share-btn').forEach(btn => {{
            btn.addEventListener('click', function(e) {{
                e.preventDefault();
                const url = window.location.href;
                const title = document.querySelector('h1').textContent;
                
                if (this.classList.contains('share-twitter')) {{
                    window.open(`https://twitter.com/intent/tweet?text=${{encodeURIComponent(title)}}&url=${{encodeURIComponent(url)}}`, '_blank', 'width=600,height=400');
                }} else if (this.classList.contains('share-facebook')) {{
                    window.open(`https://www.facebook.com/sharer/sharer.php?u=${{encodeURIComponent(url)}}`, '_blank', 'width=600,height=400');
                }} else if (this.classList.contains('share-linkedin')) {{
                    window.open(`https://www.linkedin.com/sharing/share-offsite/?url=${{encodeURIComponent(url)}}`, '_blank', 'width=600,height=400');
                }} else if (this.classList.contains('share-email')) {{
                    window.location.href = `mailto:?subject=${{encodeURIComponent(title)}}&body=${{encodeURIComponent(url)}}`;
                }} else if (this.classList.contains('share-copy')) {{
                    navigator.clipboard.writeText(url).then(() => {{
                        alert('Link copied to clipboard!');
                    }});
                }}
            }});
        }});
        
        // Show sidebar on scroll
        window.addEventListener('scroll', () => {{
            const sidebar = document.getElementById('shareSidebar');
            if (window.scrollY > 200) {{
                sidebar.style.opacity = '1';
                sidebar.style.visibility = 'visible';
            }} else {{
                sidebar.style.opacity = '0';
                sidebar.style.visibility = 'hidden';
            }}
        }});
    </script>

</body>
</html>'''
    
    # Write the file
    file_path = blog_dir / f"{post_slug}.html"
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(html_content)
    
    return file_path

def main():
    print("üîç Checking for new blog posts without static HTML files...")
    
    # Get all published posts
    response = supabase.table('blog_posts').select('*, blogs(*)').eq('status', 'published').execute()
    posts = response.data
    
    if not posts:
        print("‚ùå No published posts found")
        return
    
    new_posts_generated = 0
    skipped_no_blog = 0
    
    for post in posts:
        blog = post.get('blogs')
        
        # Skip if post has no associated blog
        if not blog:
            print(f"‚ö†Ô∏è  Skipping (no blog): {post.get('title', 'Unknown')}")
            skipped_no_blog += 1
            continue
            
        blog_slug = blog['slug']
        post_slug = post['slug']
        
        # Check if static file exists
        if post_has_static_file(blog_slug, post_slug):
            print(f"‚è≠Ô∏è  Skipping (already exists): {blog_slug}/{post_slug}")
            continue
        
        # Generate static HTML
        print(f"‚ú® Generating: {blog_slug}/{post_slug}.html")
        file_path = generate_static_html(post, blog)
        print(f"   ‚úÖ Created: {file_path}")
        new_posts_generated += 1
    
    if new_posts_generated > 0:
        print(f"\nüéâ Generated {new_posts_generated} new static HTML file(s)")
        if skipped_no_blog > 0:
            print(f"‚ö†Ô∏è  Skipped {skipped_no_blog} post(s) with no blog assignment")
        print("\nüìù Next steps:")
        print("   Use GitHub Desktop to commit and push")
    else:
        print("\n‚úÖ All posts already have static HTML files!")
        if skipped_no_blog > 0:
            print(f"‚ö†Ô∏è  Note: {skipped_no_blog} post(s) have no blog assignment")

if __name__ == "__main__":
    main()
