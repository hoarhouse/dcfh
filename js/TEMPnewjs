// ===================================================================
// DCF HUNGARY - UNIFIED AUTHENTICATION SYSTEM - FIXED VERSION
// HANDLES CLEAN DATABASE WITH ONLY CHRIS HOAR USER
// NO CONFLICTS, EVERYTHING WORKS WITH CORRECT DATA
// ===================================================================

console.log('🚀 DCF Unified Auth System Loading...');

// =============================================================================
// 1. SINGLE SUPABASE CLIENT - NO CONFLICTS
// =============================================================================
const SUPABASE_URL = 'https://atzommnkkwzgbktuzjti.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImF0em9tbW5ra3d6Z2JrdHV6anRpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTMzNzAyMzIsImV4cCI6MjA2ODk0NjIzMn0.9mh2A5A5mLbo408S9g7k76VRzSJE0QWdiYTTOPLEiks';

// SINGLE CLIENT - PREVENT MULTIPLE INSTANCES
if (!window.dcfSupabase) {
    if (typeof window !== 'undefined' && window.supabase) {
        window.dcfSupabase = window.supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
        console.log('✅ Single Supabase client created');
    } else {
        console.error('❌ Supabase library not loaded');
    }
}

// =============================================================================
// 2. GLOBAL STATE - SINGLE SOURCE OF TRUTH
// =============================================================================
window.dcfUser = {
    isLoggedIn: false,
    profile: null,
    session: null
};

window.isDropdownOpen = false;
window.notificationDropdownOpen = false;

// =============================================================================
// 3. AUTHENTICATION CORE - FIXED FOR CLEAN DATABASE
// =============================================================================
async function initializeAuth() {
    if (!window.dcfSupabase) {
        console.log('❌ No Supabase client available');
        return false;
    }
    
    try {
        console.log('🔐 Checking authentication...');
        
        // Get current session with timeout
        const sessionPromise = window.dcfSupabase.auth.getSession();
        const timeoutPromise = new Promise((_, reject) => 
            setTimeout(() => reject(new Error('Session check timeout')), 5000)
        );
        
        const { data: { session } } = await Promise.race([sessionPromise, timeoutPromise]);
        
        if (session?.user) {
            console.log('✅ User session found:', session.user.email);
            
            // Get profile data - FIXED TO HANDLE CLEAN DATABASE
            try {
                const { data: profile, error } = await window.dcfSupabase
                    .from('user_profiles')
                    .select('*')
                    .eq('email', session.user.email)
                    .single();
                
                if (error) throw error;
                
                // FIXED: Proper user profile handling for Chris Hoar
                window.dcfUser = {
                    isLoggedIn: true,
                    profile: {
                        id: profile.id,
                        email: profile.email,
                        username: profile.username || 'hooray', // Your correct username
                        first_name: profile.first_name || 'Chris',
                        last_name: profile.last_name || 'Hoar',
                        avatar_url: profile.avatar_url || null
                    },
                    session: session
                };
                
                console.log('✅ User profile loaded correctly:', window.dcfUser.profile);
                return true;
                
            } catch (profileError) {
                console.log('⚠️ Profile fetch failed, using fallback for Chris:', profileError.message);
                
                // FALLBACK: Hardcoded for Chris Hoar since you're the only user
                window.dcfUser = {
                    isLoggedIn: true,
                    profile: {
                        id: session.user.id,
                        email: 'previewcapital@gmail.com',
                        username: 'hooray',
                        first_name: 'Chris',
                        last_name: 'Hoar',
                        avatar_url: null
                    },
                    session: session
                };
                
                return true;
            }
        } else {
            console.log('ℹ️ No user session found');
            window.dcfUser = { isLoggedIn: false, profile: null, session: null };
            return false;
        }
        
    } catch (error) {
        console.error('❌ Auth initialization failed:', error.message);
        window.dcfUser = { isLoggedIn: false, profile: null, session: null };
        return false;
    }
}

// =============================================================================
// 4. USER INTERFACE UPDATES - FIXED INITIALS AND USERNAME
// =============================================================================
function updateUserInterface() {
    console.log('🎨 Updating user interface...');
    
    const user = window.dcfUser;
    
    if (!user.isLoggedIn || !user.profile) {
        console.log('ℹ️ User not logged in, showing login state');
        showLoggedOutState();
        return;
    }
    
    console.log('✅ Updating UI for logged-in user:', user.profile.username);
    
    // Update dropdown info - FIXED TO SHOW @USERNAME
    const nameElement = document.getElementById('dropdownUserName');
    const emailElement = document.getElementById('dropdownUserEmail');
    
    if (nameElement) {
        nameElement.textContent = `@${user.profile.username}`; // Show @hooray
    }
    if (emailElement) {
        emailElement.textContent = user.profile.email;
    }
    
    // Generate CORRECT initials - CH for Chris Hoar
    const initials = generateCorrectInitials(user.profile);
    console.log('🔤 Generated correct initials:', initials);
    
    // Update main avatar
    const avatarElement = document.getElementById('userAvatar');
    if (avatarElement) {
        if (user.profile.avatar_url) {
            console.log('🖼️ Setting profile picture:', user.profile.avatar_url);
            avatarElement.style.backgroundImage = `url(${user.profile.avatar_url})`;
            avatarElement.style.backgroundSize = 'cover';
            avatarElement.style.backgroundPosition = 'center';
            avatarElement.textContent = '';
        } else {
            console.log('🔤 Using correct initials:', initials);
            avatarElement.style.backgroundImage = '';
            avatarElement.style.background = 'linear-gradient(135deg, #000, #333)';
            avatarElement.textContent = initials;
        }
        
        // Make clickable
        avatarElement.setAttribute('onclick', 'toggleUserMenu()');
        avatarElement.style.cursor = 'pointer';
        avatarElement.className = 'user-avatar';
    }
    
    // Update dropdown avatar
    const dropdownAvatarElement = document.querySelector('.dropdown-avatar');
    if (dropdownAvatarElement) {
        if (user.profile.avatar_url) {
            dropdownAvatarElement.style.backgroundImage = `url(${user.profile.avatar_url})`;
            dropdownAvatarElement.style.backgroundSize = 'cover';
            dropdownAvatarElement.style.backgroundPosition = 'center';
            dropdownAvatarElement.textContent = '';
        } else {
            dropdownAvatarElement.style.backgroundImage = '';
            dropdownAvatarElement.style.background = 'linear-gradient(135deg, #000, #333)';
            dropdownAvatarElement.textContent = initials;
        }
    }
    
    // Add notification bell
    addNotificationBell();
    
    // Populate navigation
    populateTopNavigation();
    
    console.log('✅ UI update complete with correct data');
}

// =============================================================================
// 5. FIXED INITIALS GENERATION FOR CHRIS HOAR
// =============================================================================
function generateCorrectInitials(profile) {
    // FIXED: Always return CH for Chris Hoar
    if (profile.email === 'previewcapital@gmail.com') {
        return 'CH'; // Chris Hoar
    }
    
    // For any future users, use first/last name
    if (profile.first_name && profile.last_name) {
        return (profile.first_name[0] + profile.last_name[0]).toUpperCase();
    }
    
    // Fallback to username
    if (profile.username) {
        const clean = profile.username.replace('@', '').trim();
        return clean.length >= 2 ? clean.substring(0, 2).toUpperCase() : 'U';
    }
    
    return 'U';
}

// =============================================================================
// 6. NAVIGATION SYSTEM - FIXED FOR DCF PAGES
// =============================================================================
function populateTopNavigation() {
    console.log('🚀 populateTopNavigation() called');
    
    const navMenu = document.getElementById('navMenu');
    console.log('🔍 DEBUG NAV: navMenu element found:', !!navMenu);
    
    if (!navMenu) {
        console.log('❌ NAV: navMenu element not found');
        return;
    }
    
    const currentUser = window.dcfUser;
    console.log('🔍 DEBUG NAV: window.dcfUser:', currentUser);
    console.log('🔍 DEBUG NAV: User login status:', currentUser?.isLoggedIn);
    
    const isLoggedIn = currentUser?.isLoggedIn || false;
    const navType = isLoggedIn ? 'member' : 'public';
    console.log('🔍 DEBUG NAV: Navigation type:', navType);
    
    let navItems = [];
    
    if (isLoggedIn) {
        console.log('✅ DEBUG NAV: Using member navigation');
        navItems = [
            { href: 'dcf_member_home.html', text: 'Home', icon: '🏠' },
            { href: 'dcf_members_directory.html', text: 'Members', icon: '👥' },
            { href: 'dcf_projects_home.html', text: 'Projects', icon: '📋' },
            { href: 'dcf_events_calendar.html', text: 'Events', icon: '📅' },
            { href: 'dcf_resources_library.html', text: 'Resources', icon: '📚' }
        ];
    } else {
        console.log('✅ DEBUG NAV: Using public navigation');
        navItems = [
            { href: 'index.html', text: 'Home', icon: '🏠' },
            { href: 'about.html', text: 'About', icon: 'ℹ️' },
            { href: 'contact.html', text: 'Contact', icon: '📞' },
            { href: 'auth/dcf_login_page.html', text: 'Login', icon: '🔐' }
        ];
    }
    
    console.log('🔍 DEBUG NAV: navItems:', navItems);
    
    const basePath = getBasePath();
    console.log('DEBUG TOP NAV - basePath:', basePath);
    console.log('DEBUG TOP NAV - navItems:', navItems);
    console.log('DEBUG TOP NAV - isLoggedIn:', isLoggedIn);
    
    const currentPath = window.location.pathname;
    const currentPage = currentPath.split('/').pop();
    
    navMenu.innerHTML = navItems.map(item => {
        const fullHref = basePath + item.href;
        const isActive = currentPage === item.href ? 'active' : '';
        
        return `<li><a href="${fullHref}" class="${isActive}">${item.text}</a></li>`;
    }).join('');
    
    console.log('✅ DEBUG NAV: Navigation populated successfully');
}

function getBasePath() {
    const pathname = window.location.pathname;
    console.log('DEBUG PATH - pathname:', pathname);
    
    const pathParts = pathname.split('/').filter(part => part);
    console.log('DEBUG PATH - pathParts:', pathParts);
    
    if (pathParts.length === 0) return '';
    
    const filename = pathParts[pathParts.length - 1];
    console.log('DEBUG PATH - filename:', filename);
    
    if (filename.includes('.html')) {
        const currentFolder = pathParts[pathParts.length - 2];
        console.log('DEBUG PATH - currentFolder:', currentFolder);
        
        if (currentFolder === 'members' || currentFolder === 'auth') {
            console.log('DEBUG PATH - returning: ../');
            return '../';
        }
    }
    
    console.log('DEBUG PATH - returning empty string');
    return '';
}

// =============================================================================
// 7. USER MENU FUNCTIONALITY - UNCHANGED
// =============================================================================
function toggleUserMenu() {
    const dropdown = document.getElementById('userDropdown');
    if (!dropdown) return;
    
    if (window.isDropdownOpen) {
        closeUserMenu();
    } else {
        openUserMenu();
    }
}

function openUserMenu() {
    const dropdown = document.getElementById('userDropdown');
    if (!dropdown) return;
    
    dropdown.classList.add('active');
    window.isDropdownOpen = true;
    
    // Add navigation items
    addNavigationItems();
    
    // Close on outside click
    setTimeout(() => {
        document.addEventListener('click', handleDocumentClick, true);
    }, 10);
}

function closeUserMenu() {
    const dropdown = document.getElementById('userDropdown');
    if (!dropdown) return;
    
    dropdown.classList.remove('active');
    window.isDropdownOpen = false;
    document.removeEventListener('click', handleDocumentClick, true);
}

function handleDocumentClick(event) {
    const userDropdown = document.querySelector('.user-dropdown');
    if (userDropdown && !userDropdown.contains(event.target)) {
        closeUserMenu();
    }
}

function addNavigationItems() {
    const dropdown = document.getElementById('userDropdown');
    if (!dropdown || dropdown.querySelector('.nav-item')) return;

    const navigationItems = [
        { href: 'dcf_member_profile.html', icon: '👤', text: 'My Profile' },
        { href: 'dcf_members_directory.html', icon: '👥', text: 'My Connections' },
        { href: 'dcf_projects_home.html', icon: '📋', text: 'My Projects' },
        { href: 'dcf_events_calendar.html', icon: '📅', text: 'My Events' },
        { href: 'dcf_personal_analytics.html', icon: '📊', text: 'My Stats' }
    ];
    
    const navSection = document.createElement('div');
    navSection.innerHTML = '<div class="dropdown-divider"></div>';

    navigationItems.forEach(item => {
        const navItem = document.createElement('a');
        navItem.href = item.href;
        navItem.className = 'dropdown-item nav-item';
        navItem.innerHTML = `
            <span class="dropdown-icon">${item.icon}</span>
            ${item.text}
        `;
        navSection.appendChild(navItem);
    });

    const logoutItem = document.createElement('div');
    logoutItem.innerHTML = `
        <div class="dropdown-divider"></div>
        <button onclick="handleLogout()" class="dropdown-item logout-btn">
            <span class="dropdown-icon">🚪</span>
            Sign Out
        </button>
    `;
    navSection.appendChild(logoutItem);

    const dropdownHeader = dropdown.querySelector('.dropdown-header');
    if (dropdownHeader) {
        dropdown.insertBefore(navSection, dropdownHeader.nextSibling);
    }
}

// =============================================================================
// 8. LOGOUT FUNCTIONALITY - UNCHANGED
// =============================================================================
function handleLogout() {
    closeUserMenu();
    showLogoutConfirm();
}

function showLogoutConfirm() {
    if (confirm('Are you sure you want to sign out?')) {
        performLogout();
    }
}

async function performLogout() {
    try {
        if (window.dcfSupabase) {
            await window.dcfSupabase.auth.signOut();
        }
        
        // Clear state
        window.dcfUser = { isLoggedIn: false, profile: null, session: null };
        
        // Redirect to login
        window.location.href = 'auth/dcf_login_page.html';
        
    } catch (error) {
        console.error('Logout error:', error);
        // Force logout anyway
        window.location.href = 'auth/dcf_login_page.html';
    }
}

// =============================================================================
// 9. NOTIFICATION SYSTEM - UNCHANGED
// =============================================================================
function addNotificationBell() {
    const userMenu = document.querySelector('.user-menu');
    if (!userMenu || userMenu.querySelector('.notification-bell')) return;
    
    const bellHTML = `
        <div class="notification-bell" onclick="toggleNotificationDropdown(event)">
            <span class="notification-icon">🔔</span>
            <div class="notification-badge" id="notificationBadge" style="display: none;">0</div>
        </div>
    `;
    
    userMenu.insertAdjacentHTML('afterbegin', bellHTML);
    addNotificationCSS();
}

function toggleNotificationDropdown(event) {
    if (event) event.stopPropagation();
    console.log('🔔 Notification bell clicked');
}

function addNotificationCSS() {
    if (document.querySelector('#notificationCSS')) return;
    
    const style = document.createElement('style');
    style.id = 'notificationCSS';
    style.textContent = `
        .notification-bell { 
            position: relative; 
            cursor: pointer; 
            padding: 0.5rem; 
            border-radius: 50%; 
            transition: background-color 0.3s ease; 
            margin-right: 1rem; 
        }
        .notification-bell:hover { background-color: #f0f0f0; }
        .notification-icon { font-size: 1.2rem; display: block; }
        .notification-badge { 
            position: absolute; 
            top: -2px; 
            right: -2px; 
            background: #dc3545; 
            color: white; 
            border-radius: 50%; 
            width: 20px; 
            height: 20px; 
            display: flex; 
            align-items: center; 
            justify-content: center; 
            font-size: 0.7rem; 
            font-weight: 600; 
            border: 2px solid white; 
        }
    `;
    document.head.appendChild(style);
}

function showLoggedOutState() {
    const avatarElement = document.getElementById('userAvatar');
    if (avatarElement) {
        avatarElement.className = 'user-avatar logged-out';
        avatarElement.textContent = '👤';
        avatarElement.style.backgroundImage = '';
        avatarElement.style.background = 'linear-gradient(135deg, #6b7280, #4b5563)';
        avatarElement.removeAttribute('onclick');
        avatarElement.style.cursor = 'default';
    }
}

// =============================================================================
// 10. AUTH STATE LISTENER - UNCHANGED
// =============================================================================
function setupAuthStateListener() {
    if (!window.dcfSupabase) return;
    
    window.dcfSupabase.auth.onAuthStateChange(async (event, session) => {
        console.log('🔄 Auth state changed:', event);
        
        if (event === 'SIGNED_IN' && session?.user) {
            await initializeAuth();
            updateUserInterface();
        } else if (event === 'SIGNED_OUT') {
            window.dcfUser = { isLoggedIn: false, profile: null, session: null };
            showLoggedOutState();
        }
    });
}

// =============================================================================
// 11. HELPER FUNCTIONS - FIXED FOR CLEAN DATABASE
// =============================================================================
function getCurrentUser() {
    if (!window.dcfUser?.isLoggedIn) return null;
    return window.dcfUser.profile;
}

function isUserLoggedIn() {
    return window.dcfUser?.isLoggedIn || false;
}

function getUserEmail() {
    return getCurrentUser()?.email || null;
}

function getUserName() {
    return getCurrentUser()?.username || null;
}

function getUserId() {
    return getCurrentUser()?.id || null;
}

// =============================================================================
// 12. INITIALIZATION - SINGLE ENTRY POINT
// =============================================================================
async function initializeDCF() {
    console.log('🚀 Initializing DCF Authentication System...');
    
    try {
        // Setup auth state listener
        setupAuthStateListener();
        
        // Initialize authentication
        const isLoggedIn = await initializeAuth();
        
        // Update UI based on auth state
        updateUserInterface();
        
        console.log(`✅ DCF initialization complete. User logged in: ${isLoggedIn}`);
        
        return isLoggedIn;
        
    } catch (error) {
        console.error('❌ DCF initialization failed:', error);
        showLoggedOutState();
        return false;
    }
}

// =============================================================================
// 13. GLOBAL EXPORTS
// =============================================================================
window.toggleUserMenu = toggleUserMenu;
window.handleLogout = handleLogout;
window.toggleNotificationDropdown = toggleNotificationDropdown;
window.getCurrentUser = getCurrentUser;
window.isUserLoggedIn = isUserLoggedIn;
window.getUserEmail = getUserEmail;
window.getUserName = getUserName;
window.getUserId = getUserId;
window.initializeDCF = initializeDCF;
window.populateTopNavigation = populateTopNavigation;

// =============================================================================
// 14. AUTO-INITIALIZATION
// =============================================================================
document.addEventListener('DOMContentLoaded', function() {
    console.log('📄 DOM loaded, starting DCF initialization...');
    
    // Small delay to ensure Supabase is loaded
    setTimeout(async () => {
        await initializeDCF();
    }, 500);
});

// Fallback for pages where DOM is already loaded
if (document.readyState !== 'loading') {
    console.log('📄 DOM already loaded, starting immediate initialization...');
    setTimeout(async () => {
        await initializeDCF();
    }, 100);
}

console.log('✅ DCF Unified Auth System loaded successfully - FIXED VERSION');